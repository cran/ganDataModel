// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dmProgress
void dmProgress(const std::string& step, int size);
RcppExport SEXP _ganDataModel_dmProgress(SEXP stepSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type step(stepSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    dmProgress(step, size);
    return R_NilValue;
END_RCPP
}
// dmResetSub
void dmResetSub();
RcppExport SEXP _ganDataModel_dmResetSub() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    dmResetSub();
    return R_NilValue;
END_RCPP
}
// dmGetBatchSize
int dmGetBatchSize();
RcppExport SEXP _ganDataModel_dmGetBatchSize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dmGetBatchSize());
    return rcpp_result_gen;
END_RCPP
}
// dmGetMaxSize
int dmGetMaxSize();
RcppExport SEXP _ganDataModel_dmGetMaxSize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dmGetMaxSize());
    return rcpp_result_gen;
END_RCPP
}
// dmDataSourceRead
void dmDataSourceRead(const std::string& inFileName);
RcppExport SEXP _ganDataModel_dmDataSourceRead(SEXP inFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type inFileName(inFileNameSEXP);
    dmDataSourceRead(inFileName);
    return R_NilValue;
END_RCPP
}
// dmGenerativeDataRead
void dmGenerativeDataRead(const std::string& inFileName);
RcppExport SEXP _ganDataModel_dmGenerativeDataRead(SEXP inFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type inFileName(inFileNameSEXP);
    dmGenerativeDataRead(inFileName);
    return R_NilValue;
END_RCPP
}
// dmDataSourceGetNormalizedDataRandom
std::vector<float> dmDataSourceGetNormalizedDataRandom(int rowCount);
RcppExport SEXP _ganDataModel_dmDataSourceGetNormalizedDataRandom(SEXP rowCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rowCount(rowCountSEXP);
    rcpp_result_gen = Rcpp::wrap(dmDataSourceGetNormalizedDataRandom(rowCount));
    return rcpp_result_gen;
END_RCPP
}
// dmDataSourceGetDataRandom
std::vector<std::vector<float>> dmDataSourceGetDataRandom(float percent);
RcppExport SEXP _ganDataModel_dmDataSourceGetDataRandom(SEXP percentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type percent(percentSEXP);
    rcpp_result_gen = Rcpp::wrap(dmDataSourceGetDataRandom(percent));
    return rcpp_result_gen;
END_RCPP
}
// dmGenerativeDataGetNormalizedDataRandom
std::vector<float> dmGenerativeDataGetNormalizedDataRandom(int rowCount);
RcppExport SEXP _ganDataModel_dmGenerativeDataGetNormalizedDataRandom(SEXP rowCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rowCount(rowCountSEXP);
    rcpp_result_gen = Rcpp::wrap(dmGenerativeDataGetNormalizedDataRandom(rowCount));
    return rcpp_result_gen;
END_RCPP
}
// dmGenerativeDataGetNormalizedDataRandomWithDensities
std::vector<std::vector<float>> dmGenerativeDataGetNormalizedDataRandomWithDensities(int rowCount);
RcppExport SEXP _ganDataModel_dmGenerativeDataGetNormalizedDataRandomWithDensities(SEXP rowCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rowCount(rowCountSEXP);
    rcpp_result_gen = Rcpp::wrap(dmGenerativeDataGetNormalizedDataRandomWithDensities(rowCount));
    return rcpp_result_gen;
END_RCPP
}
// dmEvaluateCopyDataSourceGetNormalizedData
std::vector<float> dmEvaluateCopyDataSourceGetNormalizedData(int row, int rowCount);
RcppExport SEXP _ganDataModel_dmEvaluateCopyDataSourceGetNormalizedData(SEXP rowSEXP, SEXP rowCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type row(rowSEXP);
    Rcpp::traits::input_parameter< int >::type rowCount(rowCountSEXP);
    rcpp_result_gen = Rcpp::wrap(dmEvaluateCopyDataSourceGetNormalizedData(row, rowCount));
    return rcpp_result_gen;
END_RCPP
}
// dmGetDataSourceDimension
int dmGetDataSourceDimension();
RcppExport SEXP _ganDataModel_dmGetDataSourceDimension() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dmGetDataSourceDimension());
    return rcpp_result_gen;
END_RCPP
}
// dmGetGenerativeDataDimension
int dmGetGenerativeDataDimension();
RcppExport SEXP _ganDataModel_dmGetGenerativeDataDimension() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dmGetGenerativeDataDimension());
    return rcpp_result_gen;
END_RCPP
}
// dmGetNormalizedSize
int dmGetNormalizedSize();
RcppExport SEXP _ganDataModel_dmGetNormalizedSize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dmGetNormalizedSize());
    return rcpp_result_gen;
END_RCPP
}
// dmGetEvaluateCopyDataSourceNormalizedSize
int dmGetEvaluateCopyDataSourceNormalizedSize();
RcppExport SEXP _ganDataModel_dmGetEvaluateCopyDataSourceNormalizedSize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dmGetEvaluateCopyDataSourceNormalizedSize());
    return rcpp_result_gen;
END_RCPP
}
// dmBuildFileName
std::string dmBuildFileName(const std::string& fileName, const std::string& extension);
RcppExport SEXP _ganDataModel_dmBuildFileName(SEXP fileNameSEXP, SEXP extensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type extension(extensionSEXP);
    rcpp_result_gen = Rcpp::wrap(dmBuildFileName(fileName, extension));
    return rcpp_result_gen;
END_RCPP
}
// dmWriteWithReadingTrainedModel
void dmWriteWithReadingTrainedModel(const std::string& outFileName);
RcppExport SEXP _ganDataModel_dmWriteWithReadingTrainedModel(SEXP outFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type outFileName(outFileNameSEXP);
    dmWriteWithReadingTrainedModel(outFileName);
    return R_NilValue;
END_RCPP
}
// dmWrite
void dmWrite(const std::string& outFileName);
RcppExport SEXP _ganDataModel_dmWrite(SEXP outFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type outFileName(outFileNameSEXP);
    dmWrite(outFileName);
    return R_NilValue;
END_RCPP
}
// dmReadDataModel
void dmReadDataModel(const std::string& inFileName);
RcppExport SEXP _ganDataModel_dmReadDataModel(SEXP inFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type inFileName(inFileNameSEXP);
    dmReadDataModel(inFileName);
    return R_NilValue;
END_RCPP
}
// dmEvaluateDataSourceRead
void dmEvaluateDataSourceRead(const std::string& inFileName);
RcppExport SEXP _ganDataModel_dmEvaluateDataSourceRead(SEXP inFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type inFileName(inFileNameSEXP);
    dmEvaluateDataSourceRead(inFileName);
    return R_NilValue;
END_RCPP
}
// dmGetEvaluateCopyDataSourceNormalizedData
std::vector<std::vector<float>> dmGetEvaluateCopyDataSourceNormalizedData(int row, int rowCount);
RcppExport SEXP _ganDataModel_dmGetEvaluateCopyDataSourceNormalizedData(SEXP rowSEXP, SEXP rowCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type row(rowSEXP);
    Rcpp::traits::input_parameter< int >::type rowCount(rowCountSEXP);
    rcpp_result_gen = Rcpp::wrap(dmGetEvaluateCopyDataSourceNormalizedData(row, rowCount));
    return rcpp_result_gen;
END_RCPP
}
// dmGetEvaluateCopyDataSourceDenormalizedData
std::vector<float> dmGetEvaluateCopyDataSourceDenormalizedData(int row, int rowCount);
RcppExport SEXP _ganDataModel_dmGetEvaluateCopyDataSourceDenormalizedData(SEXP rowSEXP, SEXP rowCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type row(rowSEXP);
    Rcpp::traits::input_parameter< int >::type rowCount(rowCountSEXP);
    rcpp_result_gen = Rcpp::wrap(dmGetEvaluateCopyDataSourceDenormalizedData(row, rowCount));
    return rcpp_result_gen;
END_RCPP
}
// dmGetNumberVectorIndexNames
std::vector<std::wstring> dmGetNumberVectorIndexNames(std::vector<int>& numberVectorIndices);
RcppExport SEXP _ganDataModel_dmGetNumberVectorIndexNames(SEXP numberVectorIndicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type numberVectorIndices(numberVectorIndicesSEXP);
    rcpp_result_gen = Rcpp::wrap(dmGetNumberVectorIndexNames(numberVectorIndices));
    return rcpp_result_gen;
END_RCPP
}
// dmGetValue
std::string dmGetValue(float level);
RcppExport SEXP _ganDataModel_dmGetValue(SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(dmGetValue(level));
    return rcpp_result_gen;
END_RCPP
}
// dmGenerativeDataGetNormalizedData
std::vector<float> dmGenerativeDataGetNormalizedData(int row, int rowCount);
RcppExport SEXP _ganDataModel_dmGenerativeDataGetNormalizedData(SEXP rowSEXP, SEXP rowCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type row(rowSEXP);
    Rcpp::traits::input_parameter< int >::type rowCount(rowCountSEXP);
    rcpp_result_gen = Rcpp::wrap(dmGenerativeDataGetNormalizedData(row, rowCount));
    return rcpp_result_gen;
END_RCPP
}
// dmGetRow
List dmGetRow(int index);
RcppExport SEXP _ganDataModel_dmGetRow(SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(dmGetRow(index));
    return rcpp_result_gen;
END_RCPP
}
// dmReadVolumeElementGraph
void dmReadVolumeElementGraph(const std::string& inFileName);
RcppExport SEXP _ganDataModel_dmReadVolumeElementGraph(SEXP inFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type inFileName(inFileNameSEXP);
    dmReadVolumeElementGraph(inFileName);
    return R_NilValue;
END_RCPP
}
// dmWriteVolumeElementGraph
void dmWriteVolumeElementGraph(const std::string& outFileName);
RcppExport SEXP _ganDataModel_dmWriteVolumeElementGraph(SEXP outFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type outFileName(outFileNameSEXP);
    dmWriteVolumeElementGraph(outFileName);
    return R_NilValue;
END_RCPP
}
// dmAddVolumeElementsSub
void dmAddVolumeElementsSub(std::vector<float>& volumeElementValues, std::vector<int>& dimensions, int indexBegin, float level);
RcppExport SEXP _ganDataModel_dmAddVolumeElementsSub(SEXP volumeElementValuesSEXP, SEXP dimensionsSEXP, SEXP indexBeginSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<float>& >::type volumeElementValues(volumeElementValuesSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type dimensions(dimensionsSEXP);
    Rcpp::traits::input_parameter< int >::type indexBegin(indexBeginSEXP);
    Rcpp::traits::input_parameter< float >::type level(levelSEXP);
    dmAddVolumeElementsSub(volumeElementValues, dimensions, indexBegin, level);
    return R_NilValue;
END_RCPP
}
// dmBuildVolumeElements
void dmBuildVolumeElements();
RcppExport SEXP _ganDataModel_dmBuildVolumeElements() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    dmBuildVolumeElements();
    return R_NilValue;
END_RCPP
}
// dmBuildVolumeElementTree
void dmBuildVolumeElementTree();
RcppExport SEXP _ganDataModel_dmBuildVolumeElementTree() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    dmBuildVolumeElementTree();
    return R_NilValue;
END_RCPP
}
// dmBuildVolumeElementGraph
void dmBuildVolumeElementGraph();
RcppExport SEXP _ganDataModel_dmBuildVolumeElementGraph() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    dmBuildVolumeElementGraph();
    return R_NilValue;
END_RCPP
}
// dmAddVolumeElementGraph
void dmAddVolumeElementGraph();
RcppExport SEXP _ganDataModel_dmAddVolumeElementGraph() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    dmAddVolumeElementGraph();
    return R_NilValue;
END_RCPP
}
// dmBuildMetricSubspacesSub
int dmBuildMetricSubspacesSub();
RcppExport SEXP _ganDataModel_dmBuildMetricSubspacesSub() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dmBuildMetricSubspacesSub());
    return rcpp_result_gen;
END_RCPP
}
// dmGetGenerativeDataRandom
std::vector<std::vector<float>> dmGetGenerativeDataRandom(float percent);
RcppExport SEXP _ganDataModel_dmGetGenerativeDataRandom(SEXP percentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type percent(percentSEXP);
    rcpp_result_gen = Rcpp::wrap(dmGetGenerativeDataRandom(percent));
    return rcpp_result_gen;
END_RCPP
}
// dmGetMetricSubspaceDenormalizedGenerativeData
std::vector<float> dmGetMetricSubspaceDenormalizedGenerativeData(float level, int metricSubspaceIndex, float percent, bool boundary);
RcppExport SEXP _ganDataModel_dmGetMetricSubspaceDenormalizedGenerativeData(SEXP levelSEXP, SEXP metricSubspaceIndexSEXP, SEXP percentSEXP, SEXP boundarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type level(levelSEXP);
    Rcpp::traits::input_parameter< int >::type metricSubspaceIndex(metricSubspaceIndexSEXP);
    Rcpp::traits::input_parameter< float >::type percent(percentSEXP);
    Rcpp::traits::input_parameter< bool >::type boundary(boundarySEXP);
    rcpp_result_gen = Rcpp::wrap(dmGetMetricSubspaceDenormalizedGenerativeData(level, metricSubspaceIndex, percent, boundary));
    return rcpp_result_gen;
END_RCPP
}
// dmGetMetricSubspaceIndices
std::vector<int> dmGetMetricSubspaceIndices(float level, std::vector<std::string> labels);
RcppExport SEXP _ganDataModel_dmGetMetricSubspaceIndices(SEXP levelSEXP, SEXP labelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type level(levelSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type labels(labelsSEXP);
    rcpp_result_gen = Rcpp::wrap(dmGetMetricSubspaceIndices(level, labels));
    return rcpp_result_gen;
END_RCPP
}
// dmGetAdjacentVolumeElementIndices
List dmGetAdjacentVolumeElementIndices(int index);
RcppExport SEXP _ganDataModel_dmGetAdjacentVolumeElementIndices(SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(dmGetAdjacentVolumeElementIndices(index));
    return rcpp_result_gen;
END_RCPP
}
// dmGetMax
float dmGetMax(int i);
RcppExport SEXP _ganDataModel_dmGetMax(SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(dmGetMax(i));
    return rcpp_result_gen;
END_RCPP
}
// dmGetMin
float dmGetMin(int i);
RcppExport SEXP _ganDataModel_dmGetMin(SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(dmGetMin(i));
    return rcpp_result_gen;
END_RCPP
}
// dmGetLevels
std::vector<float> dmGetLevels();
RcppExport SEXP _ganDataModel_dmGetLevels() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dmGetLevels());
    return rcpp_result_gen;
END_RCPP
}
// dmGetMetricSubspaceProperties
List dmGetMetricSubspaceProperties(float level);
RcppExport SEXP _ganDataModel_dmGetMetricSubspaceProperties(SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(dmGetMetricSubspaceProperties(level));
    return rcpp_result_gen;
END_RCPP
}
// dmRemoveMetricSubspacesSub
void dmRemoveMetricSubspacesSub(float level);
RcppExport SEXP _ganDataModel_dmRemoveMetricSubspacesSub(SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type level(levelSEXP);
    dmRemoveMetricSubspacesSub(level);
    return R_NilValue;
END_RCPP
}
// dmNormalizedDataRecord
std::vector<float> dmNormalizedDataRecord(List dataRecord);
RcppExport SEXP _ganDataModel_dmNormalizedDataRecord(SEXP dataRecordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dataRecord(dataRecordSEXP);
    rcpp_result_gen = Rcpp::wrap(dmNormalizedDataRecord(dataRecord));
    return rcpp_result_gen;
END_RCPP
}
// dmGetMetricSubspacesSub
List dmGetMetricSubspacesSub(List dataRecord, float level);
RcppExport SEXP _ganDataModel_dmGetMetricSubspacesSub(SEXP dataRecordSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dataRecord(dataRecordSEXP);
    Rcpp::traits::input_parameter< float >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(dmGetMetricSubspacesSub(dataRecord, level));
    return rcpp_result_gen;
END_RCPP
}
// dmMetricSubspaceLabelPointsSub
List dmMetricSubspaceLabelPointsSub(float lLevel, float rLevel, float percent, std::vector<int>& columnIndices, const std::vector<std::string>& lLabels);
RcppExport SEXP _ganDataModel_dmMetricSubspaceLabelPointsSub(SEXP lLevelSEXP, SEXP rLevelSEXP, SEXP percentSEXP, SEXP columnIndicesSEXP, SEXP lLabelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type lLevel(lLevelSEXP);
    Rcpp::traits::input_parameter< float >::type rLevel(rLevelSEXP);
    Rcpp::traits::input_parameter< float >::type percent(percentSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type columnIndices(columnIndicesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type lLabels(lLabelsSEXP);
    rcpp_result_gen = Rcpp::wrap(dmMetricSubspaceLabelPointsSub(lLevel, rLevel, percent, columnIndices, lLabels));
    return rcpp_result_gen;
END_RCPP
}
// dmSortLevelIndices
std::vector<int> dmSortLevelIndices(std::vector<float>& levels);
RcppExport SEXP _ganDataModel_dmSortLevelIndices(SEXP levelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<float>& >::type levels(levelsSEXP);
    rcpp_result_gen = Rcpp::wrap(dmSortLevelIndices(levels));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ganDataModel_dmProgress", (DL_FUNC) &_ganDataModel_dmProgress, 2},
    {"_ganDataModel_dmResetSub", (DL_FUNC) &_ganDataModel_dmResetSub, 0},
    {"_ganDataModel_dmGetBatchSize", (DL_FUNC) &_ganDataModel_dmGetBatchSize, 0},
    {"_ganDataModel_dmGetMaxSize", (DL_FUNC) &_ganDataModel_dmGetMaxSize, 0},
    {"_ganDataModel_dmDataSourceRead", (DL_FUNC) &_ganDataModel_dmDataSourceRead, 1},
    {"_ganDataModel_dmGenerativeDataRead", (DL_FUNC) &_ganDataModel_dmGenerativeDataRead, 1},
    {"_ganDataModel_dmDataSourceGetNormalizedDataRandom", (DL_FUNC) &_ganDataModel_dmDataSourceGetNormalizedDataRandom, 1},
    {"_ganDataModel_dmDataSourceGetDataRandom", (DL_FUNC) &_ganDataModel_dmDataSourceGetDataRandom, 1},
    {"_ganDataModel_dmGenerativeDataGetNormalizedDataRandom", (DL_FUNC) &_ganDataModel_dmGenerativeDataGetNormalizedDataRandom, 1},
    {"_ganDataModel_dmGenerativeDataGetNormalizedDataRandomWithDensities", (DL_FUNC) &_ganDataModel_dmGenerativeDataGetNormalizedDataRandomWithDensities, 1},
    {"_ganDataModel_dmEvaluateCopyDataSourceGetNormalizedData", (DL_FUNC) &_ganDataModel_dmEvaluateCopyDataSourceGetNormalizedData, 2},
    {"_ganDataModel_dmGetDataSourceDimension", (DL_FUNC) &_ganDataModel_dmGetDataSourceDimension, 0},
    {"_ganDataModel_dmGetGenerativeDataDimension", (DL_FUNC) &_ganDataModel_dmGetGenerativeDataDimension, 0},
    {"_ganDataModel_dmGetNormalizedSize", (DL_FUNC) &_ganDataModel_dmGetNormalizedSize, 0},
    {"_ganDataModel_dmGetEvaluateCopyDataSourceNormalizedSize", (DL_FUNC) &_ganDataModel_dmGetEvaluateCopyDataSourceNormalizedSize, 0},
    {"_ganDataModel_dmBuildFileName", (DL_FUNC) &_ganDataModel_dmBuildFileName, 2},
    {"_ganDataModel_dmWriteWithReadingTrainedModel", (DL_FUNC) &_ganDataModel_dmWriteWithReadingTrainedModel, 1},
    {"_ganDataModel_dmWrite", (DL_FUNC) &_ganDataModel_dmWrite, 1},
    {"_ganDataModel_dmReadDataModel", (DL_FUNC) &_ganDataModel_dmReadDataModel, 1},
    {"_ganDataModel_dmEvaluateDataSourceRead", (DL_FUNC) &_ganDataModel_dmEvaluateDataSourceRead, 1},
    {"_ganDataModel_dmGetEvaluateCopyDataSourceNormalizedData", (DL_FUNC) &_ganDataModel_dmGetEvaluateCopyDataSourceNormalizedData, 2},
    {"_ganDataModel_dmGetEvaluateCopyDataSourceDenormalizedData", (DL_FUNC) &_ganDataModel_dmGetEvaluateCopyDataSourceDenormalizedData, 2},
    {"_ganDataModel_dmGetNumberVectorIndexNames", (DL_FUNC) &_ganDataModel_dmGetNumberVectorIndexNames, 1},
    {"_ganDataModel_dmGetValue", (DL_FUNC) &_ganDataModel_dmGetValue, 1},
    {"_ganDataModel_dmGenerativeDataGetNormalizedData", (DL_FUNC) &_ganDataModel_dmGenerativeDataGetNormalizedData, 2},
    {"_ganDataModel_dmGetRow", (DL_FUNC) &_ganDataModel_dmGetRow, 1},
    {"_ganDataModel_dmReadVolumeElementGraph", (DL_FUNC) &_ganDataModel_dmReadVolumeElementGraph, 1},
    {"_ganDataModel_dmWriteVolumeElementGraph", (DL_FUNC) &_ganDataModel_dmWriteVolumeElementGraph, 1},
    {"_ganDataModel_dmAddVolumeElementsSub", (DL_FUNC) &_ganDataModel_dmAddVolumeElementsSub, 4},
    {"_ganDataModel_dmBuildVolumeElements", (DL_FUNC) &_ganDataModel_dmBuildVolumeElements, 0},
    {"_ganDataModel_dmBuildVolumeElementTree", (DL_FUNC) &_ganDataModel_dmBuildVolumeElementTree, 0},
    {"_ganDataModel_dmBuildVolumeElementGraph", (DL_FUNC) &_ganDataModel_dmBuildVolumeElementGraph, 0},
    {"_ganDataModel_dmAddVolumeElementGraph", (DL_FUNC) &_ganDataModel_dmAddVolumeElementGraph, 0},
    {"_ganDataModel_dmBuildMetricSubspacesSub", (DL_FUNC) &_ganDataModel_dmBuildMetricSubspacesSub, 0},
    {"_ganDataModel_dmGetGenerativeDataRandom", (DL_FUNC) &_ganDataModel_dmGetGenerativeDataRandom, 1},
    {"_ganDataModel_dmGetMetricSubspaceDenormalizedGenerativeData", (DL_FUNC) &_ganDataModel_dmGetMetricSubspaceDenormalizedGenerativeData, 4},
    {"_ganDataModel_dmGetMetricSubspaceIndices", (DL_FUNC) &_ganDataModel_dmGetMetricSubspaceIndices, 2},
    {"_ganDataModel_dmGetAdjacentVolumeElementIndices", (DL_FUNC) &_ganDataModel_dmGetAdjacentVolumeElementIndices, 1},
    {"_ganDataModel_dmGetMax", (DL_FUNC) &_ganDataModel_dmGetMax, 1},
    {"_ganDataModel_dmGetMin", (DL_FUNC) &_ganDataModel_dmGetMin, 1},
    {"_ganDataModel_dmGetLevels", (DL_FUNC) &_ganDataModel_dmGetLevels, 0},
    {"_ganDataModel_dmGetMetricSubspaceProperties", (DL_FUNC) &_ganDataModel_dmGetMetricSubspaceProperties, 1},
    {"_ganDataModel_dmRemoveMetricSubspacesSub", (DL_FUNC) &_ganDataModel_dmRemoveMetricSubspacesSub, 1},
    {"_ganDataModel_dmNormalizedDataRecord", (DL_FUNC) &_ganDataModel_dmNormalizedDataRecord, 1},
    {"_ganDataModel_dmGetMetricSubspacesSub", (DL_FUNC) &_ganDataModel_dmGetMetricSubspacesSub, 2},
    {"_ganDataModel_dmMetricSubspaceLabelPointsSub", (DL_FUNC) &_ganDataModel_dmMetricSubspaceLabelPointsSub, 5},
    {"_ganDataModel_dmSortLevelIndices", (DL_FUNC) &_ganDataModel_dmSortLevelIndices, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_ganDataModel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
